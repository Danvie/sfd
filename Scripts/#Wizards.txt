//==================================================================//
//============<    #WIZARDS GAMEMODE BY #OCTOTHORP    >=============//
//============<                  v0.1.1                  >==========//
//==================================================================//
//=====================< #WIZARDS - settings >======================//
//=============================<general>============================//
private bool ALLOW_WEAPONS = true;										//set to true to restrict guns and throwables..
private bool HOSTING_ACTIVATED = false;										//set to true to kill host at the beginning of each round.
//private bool timeLimit = true;									//set to true to enable time limit for last 2 players.
//=========================<commentator>============================//
//some rpg commentaries made by Gwen. I would do some too.
//==================================================================//
//=================< DO NOT TOUCH ANYTHING IN BELOW >===============//
//==============< IF YOU'RE NOT SURE WHAT YOU'RE DOING >============//
//==================================================================//

// ====================== //
// ===< DECLARATIONS >=== //
// ====================== //

public class PlayerData {
	public IUser User = null;
	public IPlayer Player = null;
	public int Mana = 0;
	public int CurrentSpellId = 0;
	public float NextSpellTime = 0f;
	public float NextUseTime = 0f;
	public float LastUseTime = 0f;
	public IObjectText Label = null;
	public bool IsFrozen = false;
	public float UnFreezeTime = 0f;
	public float AddedHealth = 0f;

	public class SpellData {
		public string Name = "unnamed";
		public int ManaCost = 0;
		public float Cooldown = 0f;

		public SpellData(string name, int cost, float cooldown){
			this.Name = name;
			this.ManaCost = cost;
			this.Cooldown = cooldown;
		}
	}

	public PlayerData(IUser user, IPlayer ply, int mana){
		this.User = user;
		this.Player = ply;
		this.Mana = mana;
	}

	public PlayerData(){}

	public List<SpellData> Spells = new List<SpellData>();
}

private class DeadPlayerData {
	public float DeathTime = 0f;
	public IUser User = null;
	public IPlayer Body = null;
	public PlayerTeam Team = PlayerTeam.Independent;

	public DeadPlayerData(float deathTime, IUser user, IPlayer body, PlayerTeam team){
		this.DeathTime = deathTime;
		this.User = user;
		this.Body = body;
		this.Team = team;
	}
}

private class ProjData {
	public IObject ProjObject = null;
	public float SpawnTime = 0f;
	public float LifeTime = 1000f;
	public bool Explosive = false;

	public ProjData (IObject obj, float time, float life, bool explode){
		this.ProjObject = obj;
		this.SpawnTime = time;
		this.LifeTime = life;
		this.Explosive = explode;
	}
}

Random rand = new Random();

private List<PlayerData> players = new List<PlayerData>();
private List<DeadPlayerData> deadPlayers = new List<DeadPlayerData>();
private List<ProjData> projs = new List<ProjData>();

// =============== //
// ===< CODE > === //
// =============== //

public void OnStartup(){
	foreach(IPlayer ply in Game.GetPlayers()) 
		if (ply.GetUser() != null) players.Add(new PlayerData(ply.GetUser(), ply, 100));
	PrepareStartSpells();

	// set up the triggers
		// fast tick trigger
		IObjectTimerTrigger timerTriger3 = (IObjectTimerTrigger)Game.CreateObject("TimerTrigger"); 
		timerTriger3.SetIntervalTime(50);
		timerTriger3.SetRepeatCount(0);
		timerTriger3.SetScriptMethod("FastTick");
		timerTriger3.Trigger();

		// mid tick trigger
		IObjectTimerTrigger timerTriger2 = (IObjectTimerTrigger)Game.CreateObject("TimerTrigger"); 
		timerTriger2.SetIntervalTime(150);
		timerTriger2.SetRepeatCount(0);
		timerTriger2.SetScriptMethod("MidTick");
		timerTriger2.Trigger();

		// slow tick trigger
		IObjectTimerTrigger timerTriger = (IObjectTimerTrigger)Game.CreateObject("TimerTrigger"); 
		timerTriger.SetIntervalTime(500);
		timerTriger.SetRepeatCount(0);
		timerTriger.SetScriptMethod("SlowTick");
		timerTriger.Trigger();

		// death trigger
		IObjectTrigger deathTrigger = (IObjectTrigger)Game.CreateObject("OnPlayerDeathTrigger"); 
		deathTrigger.SetScriptMethod("Death");

	// prepare map
	foreach (IObject obj in Game.GetObjectsByName(new string[]{"SpawnWeapon", "SpawnWeaponArea", "SpawnWeaponAreaCeiling"})) obj.Remove();
	if(HOSTING_ACTIVATED) Game.GetPlayers()[0].Remove();

	// some messages
	Game.RunCommand("/MSG #Wizards v0.1.1 (beta)");
	Game.ShowPopupMessage("Controls:\n[KEY=BLOCK_AIM] - change spell\n[KEY=ATTACK] - use spell", new Color(100,220,255));
}

public void PrepareStartSpells(){
	foreach (PlayerData data in players){
		data.Spells.Add(new PlayerData.SpellData("FirePunch", 40, 3000f));
		data.Spells.Add(new PlayerData.SpellData("FireBall", 30, 3000f));
		data.Spells.Add(new PlayerData.SpellData("Crate of doom", 50, 10000f));
		data.Spells.Add(new PlayerData.SpellData("Paper", 25, 2000f));
//		data.Spells.Add(new PlayerData.SpellData("BALLOONS!", 75, 10000f));
		data.Spells.Add(new PlayerData.SpellData("ANVIL", 25, 5000f));
//		data.Spells.Add(new PlayerData.SpellData("Demigod", 75, 15000f));
		data.Spells.Add(new PlayerData.SpellData("Heal", 10, 10000f));
//		data.Spells.Add(new PlayerData.SpellData("Defender", 0, 20000f));
		data.Spells.Add(new PlayerData.SpellData("Grab", 25, 800f));
		data.Spells.Add(new PlayerData.SpellData("FUS RO DAH", 75, 7000f));
		data.Spells.Add(new PlayerData.SpellData("To The Moon!", 50, 800f));
		data.Spells.Add(new PlayerData.SpellData("Freeze", 50, 1000f));
		data.Spells.Add(new PlayerData.SpellData("SUICIDE", 0, 5000f));
	}
}

public void Death(TriggerArgs args){
	IPlayer ply = (IPlayer)args.Sender;
	for(int i = players.Count - 1; i >=0; i--){
		PlayerData data = players[i];
		if (data.Player == ply){
			if (data.Label != null) data.Label.Remove();
			players.RemoveAt(i);
		}
	}
}

public void FastTick(TriggerArgs args){
	Tick_Display();
}

public void MidTick(TriggerArgs args){
	Tick_Stats();
	Tick_Controls();
}

public void SlowTick(TriggerArgs args){
	Tick_Projectiles();
	Tick_PopupMessage();
	if (ALLOW_WEAPONS) Tick_Weapons();
}

private bool messageHidden = false;
public void Tick_PopupMessage(){
	if (Game.TotalElapsedGameTime > 10000f && !messageHidden){
		Game.HidePopupMessage();
		messageHidden = true;
	}
}

public void Tick_Display(){
	for(int i = players.Count - 1; i >=0; i--){
		PlayerData data = players[i];
		IPlayer ply = data.Player;
		int mana = data.Mana;

		if (mana != 100 && data.Label == null){
			IObjectText labelNew = (IObjectText)Game.CreateObject("Text", Vector2.Zero, 0f);
			labelNew.SetTextColor(new Color(124, 124, 246));
			data.Label = labelNew;
		} else if (mana == 100 && data.Label != null){
			data.Label.Remove();
			data.Label = null;
		}

		if (data.Label != null){
			data.Label.SetWorldPosition(ply.GetWorldPosition() + new Vector2(-18, 36));

			/*string filling = "";
			for (int j = 1; j <= 6; j++)
				if (((float)j / 6f) <= ((float)(data.Mana)) / 100f) filling += "=";
				else filling += "  ";
			data.Label.SetText("[" + filling + "]");*/

			data.Label.SetText("Mana: " + mana.ToString());
		}
	}
}

public void Tick_Controls(){
	for(int i = players.Count - 1; i >=0; i--){
		PlayerData data = players[i];
		IPlayer ply = data.Player;
		
		if (ply.IsBlocking && data.NextUseTime <= Game.TotalElapsedGameTime){
			if (ply.FacingDirection == 1)
				if (data.CurrentSpellId == data.Spells.Count - 1) data.CurrentSpellId = 0;
				else data.CurrentSpellId ++;
			else if (ply.FacingDirection == -1)
				if (data.CurrentSpellId == 0) data.CurrentSpellId = data.Spells.Count - 1;
				else data.CurrentSpellId --;
			Game.PlayEffect(
				"PWT",
				ply.GetWorldPosition(),
				data.Spells[data.CurrentSpellId].Name + " (" + data.Spells[data.CurrentSpellId].ManaCost + ")");
			data.NextUseTime = Game.TotalElapsedGameTime + 500f;
		}

		if ((ply.IsMeleeAttacking || ply.IsJumpAttacking) && (data.NextUseTime <= Game.TotalElapsedGameTime) && Game.TotalElapsedGameTime > 4000f){
				if (data.Mana >= data.Spells[data.CurrentSpellId].ManaCost) SpellUsed(data);
				else Game.PlayEffect("PWT", ply.GetWorldPosition(), "No mana");
				data.NextUseTime = Game.TotalElapsedGameTime + 500f;
			}
	}
}

public void Tick_Stats(){
	for(int i = players.Count - 1; i >=0; i--){
		PlayerData data = players[i];
		IPlayer ply = data.Player;

		// mana
		if (data.Mana < 100 && Game.TotalElapsedGameTime >= data.LastUseTime + 2000f) data.Mana += 1;
		else if (data.Mana > 100) data.Mana = 100;

		// damage
		if (ply.GetUser() != null) ply.SetHealth(100f -
			(ply.Statistics.TotalFallDamageTaken +
			ply.Statistics.TotalMeleeDamageTaken / 5f +
			ply.Statistics.TotalProjectileDamageTaken +
			ply.Statistics.TotalExplosionDamageTaken +
			ply.Statistics.TotalFireDamageTaken) +
			data.AddedHealth);

		// freezing
		if (data.IsFrozen){
			if (data.UnFreezeTime <= Game.TotalElapsedGameTime) ply.SetInputEnabled(true);
			else {
				ply.SetInputEnabled(false);
				ply.RunToPosition(ply.GetWorldPosition(), ply.FacingDirection);
			}
		}
	}
}

public void Tick_Projectiles(){
	for(int i = projs.Count - 1; i >=0; i--){
		if (Game.TotalElapsedGameTime - projs[i].SpawnTime > projs[i].LifeTime){
			if (projs[i].Explosive) Game.TriggerExplosion(projs[i].ProjObject.GetWorldPosition());
			projs[i].ProjObject.Remove();
			projs.RemoveAt(i);
		}
	}
}

public void Tick_Weapons(){
	foreach(IPlayer ply in (Game.GetPlayers())){
		ply.RemoveWeaponItemType(WeaponItemType.Rifle);
		ply.RemoveWeaponItemType(WeaponItemType.Handgun);
		ply.RemoveWeaponItemType(WeaponItemType.Thrown);
	}
}

public void SpellUsed(PlayerData data){
	IPlayer ply = data.Player;
	int spellId = data.CurrentSpellId;

	switch(data.Spells[spellId].Name){
	case "FirePunch":
		Game.SpawnFireNodes(
			(ply.GetWorldPosition() + new Vector2(ply.FacingDirection * 8, 10)) / 25,
			12,
			new Vector2(ply.FacingDirection * 6, 0),
			1,
			2,
			FireNodeType.Flamethrower);
		break;
	case "FireBall":
		Game.SpawnFireNodes(
			(ply.GetWorldPosition() + new Vector2(ply.FacingDirection * 6, 10)) / 25,
			80,
			new Vector2(ply.FacingDirection * 20, 0),
			0.1f,
			0.1f,
			FireNodeType.Flamethrower);
		break;
	case "Crate of doom":
		{
			Vector2 pos = ply.GetWorldPosition() + new Vector2(ply.FacingDirection * 22, 16);
			IObject proj = Game.CreateObject(
			"Crate01",
			pos,
			0f,
			new Vector2(ply.FacingDirection * 20, 3),
			(float)rand.Next(-200, 200));
			for (int i = 0; i < 15; i++) Game.PlayEffect("TR_D",pos + new Vector2(rand.Next(-6,6), rand.Next(-6,6)));
			projs.Add(new ProjData(proj, Game.TotalElapsedGameTime, 8000f, false));
		}
		break;
	case "Paper":
		{
			Vector2 pos = ply.GetWorldPosition() + new Vector2(ply.FacingDirection * 6, 10);
			IObject proj = Game.CreateObject(
			"CrumpledPaper00",
			pos,
			0f,
			new Vector2(ply.FacingDirection * 10, 0),
			(float)rand.Next(-30, 30));
			Game.PlayEffect("Electric", pos);
			projs.Add(new ProjData(proj, Game.TotalElapsedGameTime, 2500f, true));
		}
		break;
	/*case "BALLOONS!":
		for (int i = 0; i < 3; i++){
			IObject proj = Game.CreateObject(
			"Balloon00",
			ply.GetWorldPosition() + new Vector2(ply.FacingDirection * 12, 10),
			0f,
			new Vector2(ply.FacingDirection * rand.Next(3,10), rand.Next(-5,5)),
			(float)rand.Next(-30, 30));
			projs.Add(new ProjData(proj, Game.TotalElapsedGameTime, 1000f, true)); }
		break;*/
	case "ANVIL":
		{
			Vector2 pos = ply.GetWorldPosition() + new Vector2(ply.FacingDirection * 48, 50);
			IObject proj = Game.CreateObject("StoneWeak00C", pos, 0f);
			proj.SetBodyType(BodyType.Dynamic);
			proj.SetLinearVelocity(new Vector2(0, -10));
			projs.Add(new ProjData(proj, Game.TotalElapsedGameTime, 1000f, false));
			for (int i = 0; i < 15; i++) Game.PlayEffect("TR_D",pos + new Vector2(rand.Next(-6,6), rand.Next(-6,6)));
		}
		break;
	/*case "Demigod":
		Game.TriggerExplosion(ply.GetWorldPosition() + new Vector2(ply.FacingDirection*100, 0f));
		break;*/
	case "Heal":
		{
			float healAmount = 5f;
			if (ply.GetHealth() == 100f){
				data.Mana += data.Spells[data.CurrentSpellId].ManaCost;
				Game.PlayEffect("PWT", ply.GetWorldPosition(), "Health full!");
			} else if (ply.GetHealth() > 100f - healAmount)
				data.AddedHealth += 100f - ply.GetHealth();
			else data.AddedHealth += healAmount;
		}
		break;
	case "Defender":
		PlayerTeam defendingTeam = ply.GetTeam();
		IPlayer defender = Game.CreatePlayer(ply.GetWorldPosition() + new Vector2(ply.FacingDirection*25, 0f));
		defender.SetBotType(BotType.TutorialA);
		defender.SetTeam(defendingTeam);
		break;
	case "Grab":
		IObject grabBg = Game.CreateObject("BgNeon01F", ply.GetWorldPosition() + new Vector2(ply.FacingDirection*10, 0f) + new Vector2(0, 8), 0);
		IObject grab = Game.CreateObject("InvisibleBlock", ply.GetWorldPosition() + new Vector2(ply.FacingDirection*10, 0f) + new Vector2(0, 8), 0);
		projs.Add(new ProjData(grabBg, Game.TotalElapsedGameTime, 1200f, false));
		projs.Add(new ProjData(grab, Game.TotalElapsedGameTime, 1200f, false));
		break;
	case "Freeze":
		{
			for (int i = 0; i <= 2; i++){
				IObjectTrigger areaTrigger = ((IObjectTrigger)Game.CreateObject(
					"AreaTrigger",
					ply.GetWorldPosition() + new Vector2(ply.FacingDirection * 50 + ((i-1)*8), 4f),
					0
				));
				areaTrigger.SetScriptMethod("SpellTrigger_Freeze");
				projs.Add(new ProjData(areaTrigger, Game.TotalElapsedGameTime, 250f, false));
			}
		}
		break;
	case "FUS RO DAH":
		{
			for (int i = 0; i <= 2; i++){
				Vector2 pos = ply.GetWorldPosition() + new Vector2(ply.FacingDirection * 50 + ((i-1)*18), 4f);
				IObjectTrigger areaTrigger = ((IObjectTrigger)Game.CreateObject(
					"AreaTrigger",
					pos,
					0
				));
				for (int j = 0; j < 15; j++) Game.PlayEffect("TR_D", pos + new Vector2(rand.Next(-6,6), rand.Next(4,16)));
				if (data.Player.FacingDirection == 1) areaTrigger.SetScriptMethod("SpellTrigger_FusRoDah_Right");
				else areaTrigger.SetScriptMethod("SpellTrigger_FusRoDah_Left");
				projs.Add(new ProjData(areaTrigger, Game.TotalElapsedGameTime, 100f, false));
			}
		}
		break;
	case "To The Moon!":
		{
			for (int i = 0; i <= 2; i++){
				Vector2 pos = ply.GetWorldPosition() + new Vector2(ply.FacingDirection * 50 + ((i-1)*18), 4f);
				IObjectTrigger areaTrigger = ((IObjectTrigger)Game.CreateObject(
					"AreaTrigger",
					pos,
					0
				));
				for (int j = 0; j < 15; j++) Game.PlayEffect("TR_D", pos + new Vector2(rand.Next(-6,6), rand.Next(-6,6)));
				areaTrigger.SetScriptMethod("SpellTrigger_ToTheMoon");
				projs.Add(new ProjData(areaTrigger, Game.TotalElapsedGameTime, 100f, false));
			}
		}
		break;
	case "SUICIDE":
		for (int i = 0; i < 5; i++) Game.TriggerExplosion(ply.GetWorldPosition() + new Vector2(rand.Next(-40, 40), rand.Next(-40, 40)));
		ply.Gib();
		break;
	default:
		Game.PlayEffect("PWT", ply.GetWorldPosition(), "SHIT, ERROR!!!");
		break;
	}
	data.Mana -= data.Spells[spellId].ManaCost;
	data.LastUseTime = Game.TotalElapsedGameTime;
	data.NextSpellTime = Game.TotalElapsedGameTime + data.Spells[spellId].Cooldown;
}

public void SpellTrigger_Freeze(TriggerArgs args){
	if (args.Sender is IPlayer){
		PlayerData data = GetPlayerData((IPlayer)args.Sender);
		IPlayer ply = data.Player;
		data.IsFrozen = true;
		data.UnFreezeTime = Game.TotalElapsedGameTime + 3000f;
		ply.SetInputEnabled(false);
	}
}

public void SpellTrigger_FusRoDah_Right(TriggerArgs args){
	if (args.Sender is IPlayer){
	IPlayer ply = (IPlayer)args.Sender;
		// side
		IObject obj = Game.CreateObject("InvisibleBlock",
			ply.GetWorldPosition() + new Vector2(-6f, 0f),
		-0.5f);
		obj.SetBodyType(BodyType.Dynamic);
		obj.SetLinearVelocity(new Vector2(12, 8));
		projs.Add(new ProjData(obj, Game.TotalElapsedGameTime, 200f, false));

		Game.PlayEffect("TR_D", ply.GetWorldPosition() + new Vector2(rand.Next(4,16), rand.Next(4,16)));
	} else if (args.Sender is IObject){
		IObject obj = (IObject)args.Sender;
		obj.SetLinearVelocity(new Vector2(15, 2));
		for (int i = 0; i < 8; i++)
			Game.PlayEffect("TR_D", obj.GetWorldPosition() + new Vector2(rand.Next(4,16), rand.Next(-6,6)));
	}
}

public void SpellTrigger_FusRoDah_Left(TriggerArgs args){
	if (args.Sender is IPlayer){
	IPlayer ply = (IPlayer)args.Sender;
		// side
		IObject obj = Game.CreateObject("InvisibleBlock",
			ply.GetWorldPosition() + new Vector2(6f, 0f),
			0.5f);
		obj.SetBodyType(BodyType.Dynamic);
		obj.SetLinearVelocity(new Vector2(-12, 8));
		projs.Add(new ProjData(obj, Game.TotalElapsedGameTime, 200f, false));

		Game.PlayEffect("TR_D", ply.GetWorldPosition() + new Vector2(rand.Next(-16,-4), rand.Next(4,16)));
	} else if (args.Sender is IObject){
		IObject obj = (IObject)args.Sender;
		obj.SetLinearVelocity(new Vector2(-15, 2));
		for (int i = 0; i < 8; i++)
			Game.PlayEffect("TR_D", obj.GetWorldPosition() + new Vector2(rand.Next(-16,-4), rand.Next(-6,6)));
	}
}

public void SpellTrigger_ToTheMoon(TriggerArgs args){
	if (args.Sender is IPlayer){
	IPlayer ply = (IPlayer)args.Sender;
		IObject obj = Game.CreateObject("InvisibleBlock",
			ply.GetWorldPosition() + new Vector2(0f, -8f),
			0);
		obj.SetBodyType(BodyType.Dynamic);
		obj.SetLinearVelocity(new Vector2(0, 10f));
		projs.Add(new ProjData(obj, Game.TotalElapsedGameTime, 200f, false));
	} else if (args.Sender is IObject){
		IObject obj = (IObject)args.Sender;
		obj.SetLinearVelocity(new Vector2(0, 15));
		for (int i = 0; i < 8; i++)
			Game.PlayEffect("TR_D", obj.GetWorldPosition() + new Vector2(rand.Next(-6,6), rand.Next(4,16)));
	}
}

//==================================================================//
//============================< HELPERS >===========================//
//==================================================================//

public PlayerData GetPlayerData(IPlayer ply){
	for(int i = players.Count - 1; i >=0; i--){
		if (players[i].Player == ply) return players[i];
	}
	return new PlayerData(); 
}

public void CreateTimer(int interval, int count, string method, string id) {
	IObjectTimerTrigger timerTrigger = (IObjectTimerTrigger)Game.CreateObject("TimerTrigger"); 
	timerTrigger.SetIntervalTime(interval);
	timerTrigger.SetRepeatCount(count);
	timerTrigger.SetScriptMethod(method);
	timerTrigger.CustomId = id;
	timerTrigger.Trigger();
}