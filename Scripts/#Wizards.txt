//==================================================================//
//============<    #WIZARDS GAMEMODE BY #OCTOTHORP    >=============//
//============<                 v0.1.1                >=============//
//==================================================================//
//=====================< #WIZARDS - settings >======================//
//============================<general>=============================//
private bool ALLOW_WEAPONS = false;									// set to true to restrict guns and throwables..
private bool HOSTING_ACTIVATED = false;								// set to true to kill host at the beginning of each round.
private bool UNLIMITED_MANA = false;								// set to true to get unlimited mana
private bool SPELL_COOLDOWN_ACTIVATED = false;						// set to true to enable spells cooldown
private bool MANA_COOLDOWN_ACTIVATED = true;						// set to true to enable mana regeneration cooldown after spell use
//private bool TIMELIMIT_ACTIVATED = true;							// set to true to enable time limit for last 2 players
//=========================<time limits>============================//
private const bool TIME_LIMIT_ACTIVATED = true;		    			// set to "true" to remove (or explode) host player at start
private const int TIME_LIMIT_SECONDS = 1 * 60;			    		// set to "true" to set host on timer bomb
private const string TIME_LIMIT_MODE = "auto";			    		// set to "main": start timer at beginning; "auto": when 2 teams or 2 players left
//=========================<commentator>============================//
//some rpg commentaries made by Gwen. I would do some too.
//==================================================================//
//=================< DO NOT TOUCH ANYTHING IN BELOW >===============//
//==============< IF YOU'RE NOT SURE WHAT YOU'RE DOING >============//
//==================================================================//

// ====================== //
// ===< DECLARATIONS >=== //
// ====================== //

// general player data
public class PlayerData {
	public IUser User = null;
	public IPlayer Player = null;

	public int Mana = 0;
	public int SpellId = 0;
	public int BookId = 0;

	public float NextUseTime = 0f;
	public float LastUseTime = 0f;
	public float LastPushedTime = 0f;
	public bool IsFrozen = false;
	public float UnFreezeTime = 0f;
	
	public float StartHealth = 100f;
	public float AddedHealth = 0f;
	public IObjectText Label = null;

	public List<BookData> Books = new List<BookData>();
	public class BookData {
		public string Name = "unnamed";
		public List<SpellData> Spells = new List<SpellData>();
		public class SpellData {
			public string Name = "unnamed";
			public int ManaCost = 0;
			public float Cooldown = 0f;
			public float LastUseTime = 0f;

			public SpellData(string name, int cost, float cooldown){
				this.Name = name;
				this.ManaCost = cost;
				this.Cooldown = cooldown;
			}
		}

		public BookData(string name, List<SpellData> spells){
			this.Name = name;
			this.Spells = spells;
		}
	}

	public PlayerData(IUser user, IPlayer ply, int mana){
		this.User = user;
		this.Player = ply;
		this.Mana = mana;
	}

	public PlayerData(){}
}

// used to revive players
private class DeadPlayerData {
	public float DeathTime = 0f;
	public IUser User = null;
	public IPlayer Body = null;
	public PlayerTeam Team = PlayerTeam.Independent;

	public DeadPlayerData(float deathTime, IUser user, IPlayer body, PlayerTeam team){
		this.DeathTime = deathTime;
		this.User = user;
		this.Body = body;
		this.Team = team;
	}

	public DeadPlayerData(){}
}

// used to remove spawned tiles and objects
private class ProjData {
	public IObject ProjObject = null;
	public float SpawnTime = 0f;
	public float LifeTime = 1000f;
	public float UnFreezeTime = 0f;
	public bool Explosive = false;

	public ProjData (IObject obj, float time, float life, bool explode){
		this.ProjObject = obj;
		this.SpawnTime = time;
		this.LifeTime = life;
		this.Explosive = explode;
	}

	public ProjData (IObject obj, float time, float life, bool explode, float unfreeze){
		this.ProjObject = obj;
		this.SpawnTime = time;
		this.LifeTime = life;
		this.Explosive = explode;
		this.UnFreezeTime = unfreeze;
	}
}

Random rand = new Random();

private List<PlayerData> players = new List<PlayerData>();
private List<DeadPlayerData> deadPlayers = new List<DeadPlayerData>();
private List<ProjData> projs = new List<ProjData>();

// time limit vars
private float m_startTime = 0;
private int m_lastElapsedSeconds = 0;
private bool m_twoOpponentsRemaining = false;
private bool WAS_ACTIVATED;

// =============== //
// ===< CODE > === //
// =============== //

public void OnStartup(){
	// give each player a set of spells
	foreach(IPlayer ply in Game.GetPlayers()) 
		if (ply.GetUser() != null) players.Add(new PlayerData(ply.GetUser(), ply, 100));
	PrepareStartSpells();

	// set up the triggers
		// fast tick trigger
		CreateTimer(50, 0, "FastTick", "");

		// mid tick trigger
		CreateTimer(150, 0, "MidTick", "");

		// slow tick trigger
		CreateTimer(500, 0, "SlowTick", "");

		// slow tick trigger
		CreateTimer(1000, 0, "VerySlowTick", "");

		// death trigger
		IObjectTrigger deathTrigger = (IObjectTrigger)Game.CreateObject("OnPlayerDeathTrigger"); 
		deathTrigger.SetScriptMethod("Death");

	// prepare map
	foreach (IObject obj in Game.GetObjectsByName(new string[]{"SpawnWeapon", "SpawnWeaponArea", "SpawnWeaponAreaCeiling"})) obj.Remove();
	if(HOSTING_ACTIVATED) Game.GetPlayers()[0].Remove();

	// some messages
	Game.RunCommand("/MSG #Wizards v0.1.1 (beta)");
	if (HOSTING_ACTIVATED) Game.RunCommand("/MSG Host is AFK");
	Game.ShowPopupMessage("Controls:\n([KEY=AIM_RUN_LEFT]/[KEY=AIM_RUN_RIGHT]) + [KEY=WALKING] + [KEY=BLOCK_AIM] - change spellbook\n([KEY=AIM_RUN_LEFT]/[KEY=AIM_RUN_RIGHT]) + [KEY=BLOCK_AIM] - change spell\n[KEY=ATTACK] - use spell\n", new Color(220,50,50));
}

public void PrepareStartSpells(){
	foreach (PlayerData data in players){
		GiveBasicSpells(data);
	}
}

public void Death(TriggerArgs args){
	IPlayer ply = (IPlayer)args.Sender;
	// remove player's player data
	for(int i = players.Count - 1; i >=0; i--){
		PlayerData data = players[i];
		if (data.Player == ply){
			if (data.Label != null) data.Label.Remove();
			players.RemoveAt(i);
		}
	}
	// add player's dead player data
	if (!ply.IsRemoved) deadPlayers.Add(new DeadPlayerData(Game.TotalElapsedGameTime, ply.GetUser(), ply, ply.GetTeam()));
}

public void FastTick(TriggerArgs args){
	Tick_Display();
}

public void MidTick(TriggerArgs args){
	Tick_Stats();
	Tick_Controls();
}

public void SlowTick(TriggerArgs args){
	Tick_Projectiles();
	Tick_PopupMessage();
	if (!ALLOW_WEAPONS) Tick_Weapons();
}

public void VerySlowTick(TriggerArgs args){
	Tick_DeadPlayers();
	if (TIME_LIMIT_ACTIVATED) Tick_TimeLimit();
}

private bool messageHidden = false;
public void Tick_PopupMessage(){
	if (Game.TotalElapsedGameTime > 6000f && !messageHidden){
		Game.HidePopupMessage();
		messageHidden = true;
	}
}

public void Tick_DeadPlayers(){
	for(int i = deadPlayers.Count - 1; i >=0; i--){
		if (deadPlayers[i].Body.IsRemoved) deadPlayers.RemoveAt(i);
	}
}

// display mana and other HUD
public void Tick_Display(){
	for(int i = players.Count - 1; i >=0; i--){
		PlayerData data = players[i];
		IPlayer ply = data.Player;
		int mana = data.Mana;

		if (mana != 100 && data.Label == null){
			IObjectText labelNew = (IObjectText)Game.CreateObject("Text", Vector2.Zero, 0f);
			labelNew.SetTextColor(GetTeamColor(ply.GetTeam()));
			data.Label = labelNew;
		} else if (mana == 100 && data.Label != null){
			data.Label.Remove();
			data.Label = null;
		}

		if (data.Label != null){
			data.Label.SetWorldPosition(ply.GetWorldPosition() + new Vector2(-18, 36));

			/*string filling = "";
			for (int j = 1; j <= 6; j++)
				if (((float)j / 6f) <= ((float)(data.Mana)) / 100f) filling += "=";
				else filling += "  ";
			data.Label.SetText("[" + filling + "]");*/

			data.Label.SetText("Mana: " + mana.ToString());
		}
	}
}

// catch player's movement to control spell changing and usage
public void Tick_Controls(){
	for(int i = players.Count - 1; i >=0; i--){
		PlayerData data = players[i];
		IPlayer ply = data.Player;

		// book changing
		if (ply.IsBlocking && ply.IsWalking && data.NextUseTime <= Game.TotalElapsedGameTime){
			if (ply.FacingDirection == 1)
				// start from beginning if it's the end
				if (data.BookId == data.Books.Count - 1) data.BookId = 0;
				else data.BookId ++;
			else if (ply.FacingDirection == -1)
				if (data.BookId == 0) data.BookId = data.Books.Count - 1;
				else data.BookId --;
			// set spell id to 0 to prevent "index out of bounds"
			data.SpellId = 0;
			// show information of chosen book and spell
			Game.PlayEffect(
				"PWT",
				ply.GetWorldPosition(),
				data.Books[data.BookId].Name + " book"
			);
			data.NextUseTime = Game.TotalElapsedGameTime + 500f;
		}

		// spell changing 
		else if (ply.IsBlocking && !ply.IsWalking && data.NextUseTime <= Game.TotalElapsedGameTime){
			if (ply.FacingDirection == 1)
				if (data.SpellId == data.Books[data.BookId].Spells.Count - 1) data.SpellId = 0;
				else data.SpellId ++;
			else if (ply.FacingDirection == -1)
				if (data.SpellId == 0) data.SpellId = data.Books[data.BookId].Spells.Count - 1;
				else data.SpellId --;
			Game.PlayEffect(
				"PWT",
				ply.GetWorldPosition(),
				data.Books[data.BookId].Spells[data.SpellId].Name +
					" (" + (data.Books[data.BookId].Spells[data.SpellId].ManaCost).ToString().Replace(",", ".") + //", " +
					/*(data.Books[data.BookId].Spells[data.SpellId].Cooldown / 1000f).ToString().Replace(",", ".") +*/ ")"
			);
			data.NextUseTime = Game.TotalElapsedGameTime + 500f;
		}

		// spell using
		if ((ply.IsMeleeAttacking || ply.IsJumpAttacking) && (data.NextUseTime <= Game.TotalElapsedGameTime) && Game.TotalElapsedGameTime > 4000f){
			PlayerData.BookData.SpellData spellData = data.Books[data.BookId].Spells[data.SpellId];
			if (spellData.LastUseTime + spellData.Cooldown <= Game.TotalElapsedGameTime){
				if (data.Mana >= spellData.ManaCost) SpellUsed(data);
				// insufficient mana
				else Game.PlayEffect("PWT", ply.GetWorldPosition(), "No mana");
				// preserve delay between uses
			} else {
				// cooldown is active
				int cooldownLeft = ((int)(((spellData.LastUseTime + spellData.Cooldown) - Game.TotalElapsedGameTime + 500f) / 1000));
				if (cooldownLeft > 0)
					Game.PlayEffect("PWT",
						ply.GetWorldPosition(),
						cooldownLeft.ToString() + " sec"
						);
			}
			data.NextUseTime = Game.TotalElapsedGameTime + 500f;
		}
	}
}

// set player's behaviour and conditions like "input enabled" or health
public void Tick_Stats(){
	for(int i = players.Count - 1; i >=0; i--){
		PlayerData data = players[i];
		IPlayer ply = data.Player;

		// mana
		if (data.Mana < 100 && Game.TotalElapsedGameTime >= data.LastUseTime + 2000f) data.Mana += 1;
		else if (data.Mana > 100) data.Mana = 100;

		// damage
		if (ply.GetUser() != null) ply.SetHealth(data.StartHealth -
			(ply.Statistics.TotalFallDamageTaken +
			ply.Statistics.TotalMeleeDamageTaken / 5f +
			ply.Statistics.TotalProjectileDamageTaken +
			ply.Statistics.TotalExplosionDamageTaken +
			ply.Statistics.TotalFireDamageTaken) +
			data.AddedHealth);

		// freezing
		if (data.IsFrozen){
			if (data.UnFreezeTime <= Game.TotalElapsedGameTime){
				Game.PlayEffect("Electric", ply.GetWorldPosition() + new Vector2(0, 8f));
				ply.SetInputEnabled(true);
				data.IsFrozen = false;
			} else {
				ply.SetInputEnabled(false);
				ply.RunToPosition(ply.GetWorldPosition(), ply.FacingDirection);

			}
		}
	}
}

// remove objects and tiles that exceeded their lifetime
public void Tick_Projectiles(){
	for(int i = projs.Count - 1; i >=0; i--){
		if (projs[i].UnFreezeTime != 0f && projs[i].UnFreezeTime <= Game.TotalElapsedGameTime && projs[i].ProjObject.GetBodyType() == BodyType.Static)
			projs[i].ProjObject.SetBodyType(BodyType.Dynamic);

		if (Game.TotalElapsedGameTime - projs[i].SpawnTime > projs[i].LifeTime){
			if (projs[i].Explosive && !projs[i].ProjObject.IsRemoved) Game.TriggerExplosion(projs[i].ProjObject.GetWorldPosition());
			/*{
				if (projs[i].ProjObject.CustomId == "PushBlock") projs[i].ProjObject.Remove();
				else if (projs[i].ProjObject.CustomId != "PushBlock") projs[i].ProjObject.Destroy();
			}*/
			projs[i].ProjObject.Remove();
			projs.RemoveAt(i);
		}
	}
}

// remove weapons from map and players
public void Tick_Weapons(){
	foreach(IPlayer ply in (Game.GetPlayers())){
		ply.RemoveWeaponItemType(WeaponItemType.Rifle);
		ply.RemoveWeaponItemType(WeaponItemType.Handgun);
		ply.RemoveWeaponItemType(WeaponItemType.Thrown);
	}
}

public void Tick_TimeLimit(){
	if (TimeLimit_Check() && Game.GetSingleObjectByCustomId("HideSettingsTrigger") == null){
		if (!m_twoOpponentsRemaining){
			// start tracking time
			// store current elapsed time
			m_startTime = Game.TotalElapsedGameTime;
			m_twoOpponentsRemaining = true;
			WAS_ACTIVATED = true;
		}
	   	int currentElapsedSeconds = (int)((Game.TotalElapsedGameTime - m_startTime) / 1000f);
	   	if (currentElapsedSeconds != m_lastElapsedSeconds){
		  // update text
		  	int totalSecondsRemaining = TIME_LIMIT_SECONDS - currentElapsedSeconds;
		  	int minutesRemaining = totalSecondsRemaining / 60;
		  	int secondsRemaining = totalSecondsRemaining - minutesRemaining * 60;
		  	if (totalSecondsRemaining > 0){
			  	Game.ShowPopupMessage(string.Format("Time remaining {0}:{1:00}", minutesRemaining, secondsRemaining));
		  	} else {
			 	Game.HidePopupMessage();
			 	Game.SetGameOver("Time's up!");
		  	}
		  m_lastElapsedSeconds = currentElapsedSeconds;
	   	}
   	}
   	else if (WAS_ACTIVATED)
   	{
		Game.HidePopupMessage();
   	}
}

public bool TimeLimit_Check(){
	Dictionary<PlayerTeam, int> teams = new Dictionary<PlayerTeam, int>();
	if (TIME_LIMIT_MODE == "main") return true;
	else if (TIME_LIMIT_MODE == "auto"){
		PlayerTeam playerATeam = PlayerTeam.Independent;
		PlayerTeam playerBTeam = PlayerTeam.Independent;
		int opponents = 0;

		foreach (IPlayer ply in Game.GetPlayers()){
			if (!ply.IsDead){
 			PlayerTeam team = ply.GetTeam();
				if (!teams.ContainsKey(team)) teams.Add(team, 1);
				else teams[team] ++;
		
				opponents++;
				switch(opponents){
					case 1: playerATeam = ply.GetTeam(); break;
					case 2: playerBTeam = ply.GetTeam(); break;
 				}   
  			}
		}

		return ((teams.Count == 2 && teams.ContainsValue(1)) || (opponents == 2 && playerATeam == PlayerTeam.Independent));
	}

	return false;
}

// use player data to perform a spell and remove mana (or set a cooldown)
public void SpellUsed(PlayerData data){
	IPlayer ply = data.Player;

	if (!UNLIMITED_MANA) data.Mana -= data.Books[data.BookId].Spells[data.SpellId].ManaCost;
	if (MANA_COOLDOWN_ACTIVATED) data.LastUseTime = Game.TotalElapsedGameTime;
	if (SPELL_COOLDOWN_ACTIVATED) data.Books[data.BookId].Spells[data.SpellId].LastUseTime = Game.TotalElapsedGameTime;

	switch(data.Books[data.BookId].Spells[data.SpellId].Name){
	case "FirePunch":
		Game.SpawnFireNodes(
			(ply.GetWorldPosition() + new Vector2(ply.FacingDirection * 10, 10)) / 25,
			12,
			new Vector2(ply.FacingDirection * 6, 0),
			1,
			2,
			FireNodeType.Flamethrower);
		break;
	case "FireBall":
		Game.SpawnFireNodes(
			(ply.GetWorldPosition() + new Vector2(ply.FacingDirection * 6, 10)) / 25,
			80,
			new Vector2(ply.FacingDirection * 20, 0),
			0.1f,
			0.1f,
			FireNodeType.Flamethrower);
		break;
	case "Crate of doom":
		{
			Vector2 pos = ply.GetWorldPosition() + new Vector2(ply.FacingDirection * 22, 16);
			IObject proj = Game.CreateObject(
			"Crate01",
			pos,
			0f,
			new Vector2(ply.FacingDirection * 15, 3),
			(float)rand.Next(-200, 200));
			for (int i = 0; i < 15; i++) Game.PlayEffect("TR_D",pos + new Vector2(rand.Next(-6,6), rand.Next(-6,6)));
			projs.Add(new ProjData(proj, Game.TotalElapsedGameTime, 8000f, false));
		}
		break;
	case "Paper":
		{
			Vector2 pos = ply.GetWorldPosition() + new Vector2(ply.FacingDirection * 6, 10);
			IObject proj = Game.CreateObject(
			"CrumpledPaper00",
			pos,
			0f,
			new Vector2(ply.FacingDirection * 10, 3),
			(float)rand.Next(-30, 30));
			Game.PlayEffect("Electric", pos);
			projs.Add(new ProjData(proj, Game.TotalElapsedGameTime, 1500f, true));
		}
		break;
	case "ANVIL":
		{
			Vector2 pos = ply.GetWorldPosition() + new Vector2(ply.FacingDirection * 48, 50);
			IObject proj = Game.CreateObject("StoneWeak00C", pos, 0f);
			proj.SetBodyType(BodyType.Dynamic);
			proj.SetLinearVelocity(new Vector2(0, -10));
			projs.Add(new ProjData(proj, Game.TotalElapsedGameTime, 1000f, false));
			for (int i = 0; i < 15; i++) Game.PlayEffect("TR_D",pos + new Vector2(rand.Next(-6,6), rand.Next(-6,6)));
		}
		break;
	case "Heal":
		{
			float healAmount = 12f;
			if (ply.GetHealth() == 100f){
				data.Mana += data.Books[data.BookId].Spells[data.SpellId].ManaCost;
				Game.PlayEffect("PWT", ply.GetWorldPosition(), "Health full!");
			} else if (ply.GetHealth() > 100f - healAmount)
				data.AddedHealth += 100f - ply.GetHealth();
			else data.AddedHealth += healAmount;
		}
		break;
	case "Revive":
		for (int i = 0; i <= 2; i++){
				IObjectTrigger areaTrigger = ((IObjectTrigger)Game.CreateObject(
					"AreaTrigger",
					ply.GetWorldPosition() + new Vector2(((i-1)*8), 2f),
					0
				));
				areaTrigger.SetScriptMethod("SpellTrigger_Revive");
				areaTrigger.CustomId = "ReviveTrigger";
				projs.Add(new ProjData(areaTrigger, Game.TotalElapsedGameTime, 50f, false));
			}
		reviveTeam = ply.GetTeam();
		break;
	case "Defender":
		PlayerTeam defendingTeam = ply.GetTeam();
		IPlayer defender = Game.CreatePlayer(ply.GetWorldPosition() + new Vector2(ply.FacingDirection*25, 0f));
		defender.SetBotType(BotType.TutorialA);
		defender.SetTeam(defendingTeam);
		break;
	case "Grab":
		IObject grab = Game.CreateObject("Wood03F", ply.GetWorldPosition() + new Vector2(ply.FacingDirection*7, 2), 0);
		projs.Add(new ProjData(grab, Game.TotalElapsedGameTime, 1200f, false));
		break;
	case "Shield":
		{
			float delay = 3000f;
			Vector2 pos = ply.GetWorldPosition() + new Vector2(ply.FacingDirection * 30, 3);
			{ IObject piece = Game.CreateObject("StoneWeak00C", pos, 0f);
			projs.Add(new ProjData(piece, Game.TotalElapsedGameTime, 30000f, false, Game.TotalElapsedGameTime + delay)); }
			{ IObject piece = Game.CreateObject("StoneWeak00C", pos + new Vector2(8, 24), 0f);
			projs.Add(new ProjData(piece, Game.TotalElapsedGameTime, 30000f, false, Game.TotalElapsedGameTime + delay)); }
			{ IObject piece = Game.CreateObject("StoneWeak00B", pos + new Vector2(12, 0), -1.57f);
			projs.Add(new ProjData(piece, Game.TotalElapsedGameTime, 30000f, false, Game.TotalElapsedGameTime + delay)); }
			{ IObject piece = Game.CreateObject("StoneWeak00B", pos + new Vector2(8, 12), 0f);
			projs.Add(new ProjData(piece, Game.TotalElapsedGameTime, 30000f, false, Game.TotalElapsedGameTime + delay)); }
			{ IObject piece = Game.CreateObject("StoneWeak00B", pos + new Vector2(-4, 16), 1.57f);
			projs.Add(new ProjData(piece, Game.TotalElapsedGameTime, 30000f, false, Game.TotalElapsedGameTime + delay)); }
			{ IObject piece = Game.CreateObject("StoneWeak00B", pos + new Vector2(-4, 32), 1.57f);
			projs.Add(new ProjData(piece, Game.TotalElapsedGameTime, 30000f, false, Game.TotalElapsedGameTime + delay)); }
			{ IObject piece = Game.CreateObject("StoneWeak00B", pos + new Vector2(8, 36), 0f);
			projs.Add(new ProjData(piece, Game.TotalElapsedGameTime, 30000f, false, Game.TotalElapsedGameTime + delay)); }
		}
		break;
	case "Freeze":
		{
			for (int i = 0; i <= 2; i++){
				IObjectTrigger areaTrigger = ((IObjectTrigger)Game.CreateObject(
					"AreaTrigger",
					ply.GetWorldPosition() + new Vector2(ply.FacingDirection * 50 + ((i-1)*8), 2f),
					0
				));
				areaTrigger.SetScriptMethod("SpellTrigger_Freeze");
				projs.Add(new ProjData(areaTrigger, Game.TotalElapsedGameTime, 250f, false));
			}
		}
		break;
	case "FUS RO DAH":
		{
			for (int i = 0; i <= 2; i++){
				Vector2 pos = ply.GetWorldPosition() + new Vector2(ply.FacingDirection * 50 + ((i-1)*18), 2f);
				IObjectTrigger areaTrigger = ((IObjectTrigger)Game.CreateObject(
					"AreaTrigger",
					pos,
					0
				));
				for (int j = 0; j < 15; j++) Game.PlayEffect("TR_D", pos + new Vector2(rand.Next(-6,6), rand.Next(4,16)));
				if (data.Player.FacingDirection == 1) areaTrigger.SetScriptMethod("SpellTrigger_FusRoDah_Right");
				else areaTrigger.SetScriptMethod("SpellTrigger_FusRoDah_Left");
				projs.Add(new ProjData(areaTrigger, Game.TotalElapsedGameTime, 100f, false));
			}
			Game.PlayEffect("CAM_S", Vector2.Zero, 1f, 500f, true);
		}
		break;
	case "To The Moon!":
		{
			for (int i = 0; i <= 2; i++){
				Vector2 pos = ply.GetWorldPosition() + new Vector2(ply.FacingDirection * 50 + ((i-1)*18), 4f);
				IObjectTrigger areaTrigger = ((IObjectTrigger)Game.CreateObject(
					"AreaTrigger",
					pos,
					0
				));
				for (int j = 0; j < 15; j++) Game.PlayEffect("TR_D", pos + new Vector2(rand.Next(-6,6), rand.Next(-6,6)));
				areaTrigger.SetScriptMethod("SpellTrigger_ToTheMoon");
				projs.Add(new ProjData(areaTrigger, Game.TotalElapsedGameTime, 100f, false));
			}
			Game.PlayEffect("CAM_S", Vector2.Zero, 1f, 500f, true);
		}
		break;
	case "SuperJump":
		{
			for (int i = 0; i <= 2; i++){
				IObject obj = Game.CreateObject("InvisibleBlock",
					ply.GetWorldPosition() + new Vector2(0f, -8f),
					0);
				obj.SetBodyType(BodyType.Dynamic);
				obj.SetLinearVelocity(new Vector2(0, 15f));
				obj.SetAngularVelocity((-1) * ply.FacingDirection * 5f);
				projs.Add(new ProjData(obj, Game.TotalElapsedGameTime, 50f, false));
				for (int j = 0; j < 15; j++) Game.PlayEffect("TR_D", ply.GetWorldPosition() + new Vector2(rand.Next(-8,8), rand.Next(-2,2)));
			}
			Game.PlayEffect("CAM_S", Vector2.Zero, 1f, 500f, true);
		}
		break;
	case "SUICIDE":
		for (int i = 0; i < 5; i++) Game.TriggerExplosion(ply.GetWorldPosition() + new Vector2(rand.Next(-40, 40), rand.Next(-40, 40)));
		ply.Gib();
		break;
	/*case "BALLOONS!":
		for (int i = 0; i < 3; i++){
			IObject proj = Game.CreateObject(
			"Balloon00",
			ply.GetWorldPosition() + new Vector2(ply.FacingDirection * 12, 10),
			0f,
			new Vector2(ply.FacingDirection * rand.Next(3,10), rand.Next(-5,5)),
			(float)rand.Next(-30, 30));
			projs.Add(new ProjData(proj, Game.TotalElapsedGameTime, 1000f, true)); }
		break;*/
	/*case "Demigod":
		Game.TriggerExplosion(ply.GetWorldPosition() + new Vector2(ply.FacingDirection*100, 0f));
		break;*/
	default:
		Game.PlayEffect("PWT", ply.GetWorldPosition(), "SHIT, ERROR!!!");
		break;
	}
}

// | these methods are used by spells
// | which create temporary triggers
// V
public void SpellTrigger_Freeze(TriggerArgs args){
	if (args.Sender is IPlayer){
		IPlayer ply = (IPlayer)args.Sender;
		if (ply.GetUser() != null){
			PlayerData data = GetPlayerData((IPlayer)args.Sender);
			data.IsFrozen = true;
			data.UnFreezeTime = Game.TotalElapsedGameTime + 5000f;
			ply.SetInputEnabled(false);
		} else {
			ply.SetBotType(BotType.None);
		}
		Game.PlayEffect("Electric", ply.GetWorldPosition() + new Vector2(0, 8f));
	}
}

// as we can't control players' velocity, we use invisible platforms to push them
public void SpellTrigger_FusRoDah_Right(TriggerArgs args){
	if (args.Sender is IPlayer){
		IPlayer ply = (IPlayer)args.Sender;

		// side
		ply.SetWorldPosition(ply.GetWorldPosition() + new Vector2(0, 10));
		IObject obj = Game.CreateObject("InvisibleBlock",
			ply.GetWorldPosition() + new Vector2(-6, 0),
			-1.2f);
		obj.SetBodyType(BodyType.Dynamic);
//		obj.SetStickyFeet(true);
		obj.SetLinearVelocity(new Vector2(12, 8));
		obj.CustomId = "PushBlock";
		projs.Add(new ProjData(obj, Game.TotalElapsedGameTime, 50f, false));

		Game.PlayEffect("TR_D", ply.GetWorldPosition() + new Vector2(rand.Next(4,16), rand.Next(4,16)));
	} else if (args.Sender is IObject){
		IObject obj = (IObject)args.Sender;
		obj.SetLinearVelocity(new Vector2(15, 2));
		for (int i = 0; i < 8; i++)
			Game.PlayEffect("TR_D", obj.GetWorldPosition() + new Vector2(rand.Next(4,16), rand.Next(-6,6)));
	}
}

public void SpellTrigger_FusRoDah_Left(TriggerArgs args){
	if (args.Sender is IPlayer){
		IPlayer ply = (IPlayer)args.Sender;

		// side
		ply.SetWorldPosition(ply.GetWorldPosition() + new Vector2(0, 10));
		IObject obj = Game.CreateObject("InvisibleBlock",
			ply.GetWorldPosition() + new Vector2(6, 0),
			1.2f);
		obj.SetBodyType(BodyType.Dynamic);
//		obj.SetStickyFeet(true);
		obj.SetLinearVelocity(new Vector2(-12, 8));
		obj.CustomId = "PushBlock";
		projs.Add(new ProjData(obj, Game.TotalElapsedGameTime, 50f, false));

		Game.PlayEffect("TR_D", ply.GetWorldPosition() + new Vector2(rand.Next(-16,4), rand.Next(4,16)));
	} else if (args.Sender is IObject){
		IObject obj = (IObject)args.Sender;
		obj.SetLinearVelocity(new Vector2(-15, 2));
		for (int i = 0; i < 8; i++)
			Game.PlayEffect("TR_D", obj.GetWorldPosition() + new Vector2(rand.Next(4,16), rand.Next(-6,6)));
	}
}

public void SpellTrigger_ToTheMoon(TriggerArgs args){
	if (args.Sender is IPlayer){
	IPlayer ply = (IPlayer)args.Sender;
		IObject obj = Game.CreateObject("InvisibleBlock",
			ply.GetWorldPosition() + new Vector2(0f, -8f),
			0);
		obj.SetBodyType(BodyType.Dynamic);
		obj.SetLinearVelocity(new Vector2(0, 10f));
		projs.Add(new ProjData(obj, Game.TotalElapsedGameTime, 200f, false));
	} else if (args.Sender is IObject){
		IObject obj = (IObject)args.Sender;
		obj.SetLinearVelocity(new Vector2(0, 15));
		for (int i = 0; i < 8; i++)
			Game.PlayEffect("TR_D", obj.GetWorldPosition() + new Vector2(rand.Next(-6,6), rand.Next(4,16)));
	}
}

PlayerTeam reviveTeam = PlayerTeam.Independent;
public void SpellTrigger_Revive(TriggerArgs args){
	if (args.Sender is IPlayer){
	IPlayer ply = (IPlayer)args.Sender;
		if (ply.IsDead && GetDeadPlayerData(ply).Body != null){
			DeadPlayerData data = GetDeadPlayerData(ply);
			float health = (float)rand.Next(15,50);

			IPlayer revivedPlayer = Game.CreatePlayer(ply.GetWorldPosition());
			revivedPlayer.SetUser(data.User);
			revivedPlayer.SetProfile(data.User.GetProfile());
			revivedPlayer.SetHealth(health);
			revivedPlayer.SetTeam(reviveTeam);
			data.Body.Remove();

			players.Add(new PlayerData(revivedPlayer.GetUser(), revivedPlayer, 0));
			GiveBasicSpells(GetPlayerData(revivedPlayer));
			GetPlayerData(revivedPlayer).StartHealth = health;

			Game.PlayEffect("PWT", revivedPlayer.GetWorldPosition(), "REVIVE!");
			Game.PlayEffect("Electric", revivedPlayer.GetWorldPosition());

			foreach (IObject obj in Game.GetObjectsByCustomId("ReviveTrigger")) obj.Remove();
		}
	}
}

//==================================================================//
//============================< HELPERS >===========================//
//==================================================================//

// get player data by IPlayer
public PlayerData GetPlayerData(IPlayer ply){
	for(int i = players.Count - 1; i >=0; i--){
		if (players[i].Player == ply) return players[i];
	}
	return new PlayerData(); 
}

private DeadPlayerData GetDeadPlayerData(IPlayer ply){
	for(int i = deadPlayers.Count - 1; i >=0; i--){
		if (deadPlayers[i].Body == ply) return deadPlayers[i];
	}
	return new DeadPlayerData(); 
}

// create timer trigger
public void CreateTimer(int interval, int count, string method, string id) {
	IObjectTimerTrigger timerTrigger = (IObjectTimerTrigger)Game.CreateObject("TimerTrigger"); 
	timerTrigger.SetIntervalTime(interval);
	timerTrigger.SetRepeatCount(count);
	timerTrigger.SetScriptMethod(method);
	timerTrigger.CustomId = id;
	timerTrigger.Trigger();
}

public Color GetTeamColor(PlayerTeam team){
	if (team == PlayerTeam.Team1) return new Color(124, 124, 246);
	if (team == PlayerTeam.Team2) return new Color(245, 78, 78);
	if (team == PlayerTeam.Team3) return new Color(5, 219, 5);
	if (team == PlayerTeam.Team4) return new Color(214, 214, 0);
	return new Color(255, 255, 255);
}

public void GiveBasicSpells(PlayerData data){
	{	// destruction spellbook
			List<PlayerData.BookData.SpellData> temp = new List<PlayerData.BookData.SpellData>();
			temp.Add(new PlayerData.BookData.SpellData("FirePunch", 40, 1000f));
			temp.Add(new PlayerData.BookData.SpellData("FireBall", 30, 1000f));
			temp.Add(new PlayerData.BookData.SpellData("Paper", 25, 500f));
			temp.Add(new PlayerData.BookData.SpellData("Crate of doom", 60, 10000f));
			temp.Add(new PlayerData.BookData.SpellData("ANVIL", 25, 3000f));
			temp.Add(new PlayerData.BookData.SpellData("SUICIDE", 0, 0f));

			data.Books.Add(new PlayerData.BookData("Destruction", temp));
		}
		{	// self spellbook
			List<PlayerData.BookData.SpellData> temp = new List<PlayerData.BookData.SpellData>();
			temp.Add(new PlayerData.BookData.SpellData("Heal", 15, 500f));
			temp.Add(new PlayerData.BookData.SpellData("Revive", 100, 30000f));

			data.Books.Add(new PlayerData.BookData("Restoration", temp));
		}
		{	// alteration spellbook
			List<PlayerData.BookData.SpellData> temp = new List<PlayerData.BookData.SpellData>();
			temp.Add(new PlayerData.BookData.SpellData("FUS RO DAH", 75, 15000));
			temp.Add(new PlayerData.BookData.SpellData("To The Moon!", 65, 8000f));
			temp.Add(new PlayerData.BookData.SpellData("SuperJump", 30, 1000f));
			temp.Add(new PlayerData.BookData.SpellData("Freeze", 100, 40000f));

			data.Books.Add(new PlayerData.BookData("Alteration", temp));
		}
		{	// mysticism spellbook
			List<PlayerData.BookData.SpellData> temp = new List<PlayerData.BookData.SpellData>();
			temp.Add(new PlayerData.BookData.SpellData("Grab", 25, 500f));
			temp.Add(new PlayerData.BookData.SpellData("Shield", 75, 20000f));

			data.Books.Add(new PlayerData.BookData("Mysticism", temp));
		}
		
		// disabled spells
//		temp.Add(new PlayerData.BookData.SpellData("BALLOONS!", 60, 10000f));
//		temp.Add(new PlayerData.BookData.SpellData("Demigod", 75, 10000f));
//		temp.Add(new PlayerData.BookData.SpellData("Minion", 100, 30000f));
}