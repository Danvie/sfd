//==========================================================//
//========<      DEATHMATCH GAMEMODE BY CHELOG      >=======//
//========<             MODIFIED BY GURT            >=======//
//========<                  V 1.2                  >=======//
//==========================================================//
//=====================< DM - settings >====================//
private const int DEATH_LIMIT = 50;			      			// DeathLimit after that round will restart (only integer)
private const int USER_RESPAWN_DELAY_MS = 2000;		      	// Time in ms after a player will respawn
private const bool GIB_CORPSES = false;			    		// if set to "true" - gib corpses; "false" - remove corpses
//==========================================================//
//=============< DO NOT TOUCH ANYTHING IN BELOW >===========//
//==========< IF YOU'RE NOT SURE WHAT YOU'RE DOING >========//
//==========================================================//

Random rand = new Random();
string playerList = "";

public void OnStartup(){
	IObjectTimerTrigger timerTriger = (IObjectTimerTrigger)Game.CreateObject("TimerTrigger"); 
	timerTriger.SetIntervalTime(500); // let it tick each second
	timerTriger.SetRepeatCount(0); // let it repeat forever
	timerTriger.SetScriptMethod("Tick"); // Method to call
	timerTriger.Trigger(); // trigger the timer so it starts to tick

	IObjectTimerTrigger timerTriger2 = (IObjectTimerTrigger)Game.CreateObject("TimerTrigger"); 
	timerTriger2.SetIntervalTime(180000); // let it tick each second
	timerTriger2.SetRepeatCount(0); // let it repeat forever
	timerTriger2.SetScriptMethod("Advert"); // Method to call
	timerTriger2.Trigger(); // trigger the timer so it starts to tick
	
	IObjectTrigger deathTrigger = (IObjectTrigger)Game.CreateObject("OnPlayerDeathTrigger"); 
	deathTrigger.SetScriptMethod("Death"); // Method to call

	Game.SetMapType(MapType.Custom);
}

public void Advert(TriggerArgs args){
	//Game.RunCommand("/MSG This server uses DM mod by chelog.");
}

// Death data storage
private class DeadPlayer {
	public float Timestamp = 0f;
	public IUser User = null;
	public IPlayer DeadBody = null;
	public DeadPlayer(float timestamp, IUser user, IPlayer deadBody){
		this.Timestamp = timestamp;
		this.User = user;
		this.DeadBody = deadBody;
	}
}


private List<DeadPlayer> m_deadPlayers = new List<DeadPlayer>();
private int deathNum = 0;
private int usersConnectedTickDelay = 6;

// called each 500ms, makes a game tick
public void Tick(TriggerArgs args){
	RespawnTick(args);
	ConnectedPlayersTick(args);
}

// called on player's death
public void Death(TriggerArgs args){
	if ((args.Sender != null) && (args.Sender is IPlayer)){
		// refresh death counter on the map

		if (deathNum < DEATH_LIMIT){
			deathNum ++;
			IPlayer killedPlayer = (IPlayer)args.Sender;
			IUser user = killedPlayer.GetUser();
			if (user != null){
				// store user to respawn and body to remove
				m_deadPlayers.Add(new DeadPlayer(Game.TotalElapsedGameTime, user, killedPlayer)); 
			}
			if (deathNum == DEATH_LIMIT - 10) Game.RunCommand("/MSG 10 kills remaining");
			if (deathNum == DEATH_LIMIT - 5) Game.RunCommand("/MSG 5 kills remaining");
		}
		if (deathNum == DEATH_LIMIT){
			Game.RunCommand("/MSG Round is over");
			Game.SetGameOver("Death limit exceeded!\n   Restarting round"); // if limit is exceeded, restart round
		}

		RefreshPlayerList();
		RefreshCounter(deathNum);
	}
}

public void RespawnTick(TriggerArgs args){
	if (m_deadPlayers.Count > 0){
		for (int i = m_deadPlayers.Count - 1; i >= 0; i --) { // traverse list backwards for easy removal of elements in list
			DeadPlayer deadPlayer = m_deadPlayers[i];
			if (deadPlayer.Timestamp + USER_RESPAWN_DELAY_MS < Game.TotalElapsedGameTime){
				// time to respawn this user
				// remove entry from list over deadPlayers
				m_deadPlayers.RemoveAt(i);
				// remove old body (if any)
				if (deadPlayer.DeadBody != null){
					if (GIB_CORPSES) {deadPlayer.DeadBody.Gib();} else {deadPlayer.DeadBody.Remove();}
				}
				// respawn user
				IPlayer ply = deadPlayer.User.GetPlayer();
				if (((ply == null) || (ply.IsDead))) {SpawnUser(deadPlayer.User);}
			}
		}
	}
}

int usersConnected = 0;
//bool justConnected = true;
public void ConnectedPlayersTick(TriggerArgs args){
	if (usersConnectedTickDelay > 0){
		usersConnectedTickDelay--;
		if(usersConnectedTickDelay <= 0){
			IUser[] users = Game.GetActiveUsers(); // get all players
			if (usersConnected == 0) {usersConnected = users.Length;} // update amount of users at start
			else if (users.Length > usersConnected){
					// check users list for non-spawned users
				for (int i=0; i<users.Length; i++){
					IPlayer ply = users[i].GetPlayer();
					if ((ply == null) || (ply.IsDead)) SpawnUser(users[i]);
				}
			}
			usersConnected = users.Length; // update number of connected users
			usersConnectedTickDelay = 6;
			RefreshPlayerList();
			RefreshCounter(deathNum);
		}
	}
}

private void SpawnUser(IUser user){
	if (CheckUserStillActive(user)){
		IObject[] spawns = Game.GetObjectsByName("SpawnPlayer");
		Vector2 spawnPos = (spawns.Length > 0 ? spawns[rand.Next(0, spawns.Length)].GetWorldPosition() : Vector2.Zero);
		
		IPlayer newPlayer = Game.CreatePlayer(spawnPos); // create a new blank player
		newPlayer.SetUser(user); // set user (this will make the user control the player instance)
		newPlayer.SetProfile(user.GetProfile()); // set user's profile
		newPlayer.SetWorldPosition(spawnPos);
	}
}

// Checks if the user is still present in the game
private bool CheckUserStillActive(IUser user){
	foreach(IUser activeUser in Game.GetActiveUsers()){
		if (activeUser.UserId == user.UserId) {
			return true;
		}
	}
	return false;
}

private void RefreshPlayerList(){
	playerList = "";
	IUser[] users = Game.GetActiveUsers();
	for (int i = 0; i < users.Length - 1; i++)
		playerList += users[i].GetProfile().Name + ", ";
		playerList += users[users.Length - 1].GetProfile().Name;
}

private void RefreshCounter(int value){
	Game.ShowPopupMessage("Players here:\n" + playerList + "\n\nCurrent deaths: " + value.ToString() + "/" + DEATH_LIMIT.ToString());
}