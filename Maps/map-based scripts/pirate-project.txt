private const int NUGGETS_PER_PLAYER = 5;


List<PlayerData> players = new List<PlayerData>(8);
Random Rnd = new Random();
float deathDelay = 10000f;

public class PlayerData{
	// players infos
	public IUser User = null;
	public IPlayer Player = null;
	public PlayerTeam Team = PlayerTeam.Independent;

	// player's stats
	public int ID = 0;
	public List<WeaponItem> Weapons = new List<WeaponItem>();
	public List<IObject> Nuggets = new List<IObject>();
	public int Money = 10;
	public float DeathTime = 0f;
	public bool EnteredBattle = false;

	// player's health situation
	public float MaxHealth = 0f;
	public float Health = 0f;
	public float LastHealth = 100f;
	public float LastDamage = 0f;
	public int Lifes = 1;

	// controls
	public bool IsThrowingNugget = false;
	
	public PlayerData(IUser user, int id, float maxHealth){
		this.User = user;
		this.ID = id;
		this.Player = User.GetPlayer();
		this.Team = player.GetTeam();
		this.MaxHealth = maxHealth;
		this.Health = maxHealth;
	}
}

public void OnStartup(){
	// set up the triggers
		// fast tick trigger
		CreateTimer(100, 0, "FastTick", "");
		// mid tick trigger
		CreateTimer(500, 0, "MidTick", "");
		// slow tick trigger
		CreateTimer(1000, 0, "SlowTick", "");
		// death trigger
		IObjectTrigger deathTrigger = (IObjectTrigger)Game.CreateObject("OnPlayerDeathTrigger"); 
		deathTrigger.SetScriptMethod("Death");

	PrepareGame();
}

public void PrepareGame(){
	int blueId = 0;
	int redId = 0;
	foreach(IUser usr in Game.GetActiveUsers()){
		IObjectText textInfo = null;
		int id = 0;

		switch (Rnd.Next(2)){
			case 0: 
				usr.GetPlayer().SetTeam(PlayerTeam.Team1); 
				usr.GetPlayer().SetWorldPosition(GetObjectPos("Blu_Spawn"));
				id = blueId;
				blueId ++;
				break;
			case 1:
				usr.GetPlayer().SetTeam(PlayerTeam.Team2);
				usr.GetPlayer().SetWorldPosition(GetObjectPos("Red_Spawn")); 
				id = redId;
				redId ++;
				break;
		}

		players.Add(new PlayerData(usr, id, 200f));

		//usr.GetPlayer().SetInputEnabled(false);
	}

	int idNumber = 0;
	foreach(IObject lamp in Game.GetObjectsByName("LightBulb00")){
		lamp.CustomId = "LAMP_" + string.Format("{0:00}", idNumber);
		idNumber++;
	}
}

public void FastTick(TriggerArgs args){
	Tick_PlayerHealth();
	Tick_Controls();
}

public void MidTick(TriggerArgs args){
	Tick_CheckPoints();
	Tick_HUB();
}

public void Tick_PlayerHealth(){
	for(int i = players.Count - 1; i >= 0; i --){
		PlayerData data = players[i];
		if(data.LastHealth != player.GetHealth()){
			data.LastDamage = data.Player.Statistics.TotalDamageTaken;
			data.Health -= data.LastHealth - player.GetHealth();
			player.SetHealth((data.Health / data.MaxHealth) * 100f);
			data.LastHealth = player.GetHealth();
		}
	}
}

public void Tick_CheckPoints(){
	int total = 0;
	int bluGold = 0;
	int redGold = 0;
	foreach(IObject lamp in Game.GetObjectsByName("LightBulb00")){
		lamp.SetHealth(100f); total ++;
		if(lamp.GetWorldPosition().X < 0f){
			bluGold++;
		} else {
			redGold++;
		}
	}
	SetTheText("Placar", "total: " + total.ToString() +"\nBlues' gold: " + bluGold.ToString() + "\nReds' gold: " + redGold.ToString());
}

public void Tick_Controls(){
	for(int i = players.Count - 1; i>=0; i--){
		PlayerData data = players[i];
		if(data.Player.IsWalking && !data.IsThrowingNugget){
			data.IsThrowingNugget = true;
			for(int o = data.Nuggets.Count - 1; o >= 0; o --){
				IObject Nugget = data.Nuggets[i];
				Nugget.SetWorldPosition(data.Player.GetWorldPosition() + new Vector2(data.Player.FacingDirection * 6f, 8f), true);
				Nugget.SetLinearVelocity(new Vector2(data.Player.FacingDirection * 4, 3f), true);
				data.Nuggets.RemoveAt(i);
			}
		} else if (!data.Player.IsWalking) {
			data.IsThrowingNugget = false;
		}
	}
}

public void Tick_HUB(){
	for(int i = players.Count - 1; i>=0; i--){
		data = players[i];
		(Game.GetSingleObjectByCustomId("BluH" + (GetPlayerDataIndex(players)).ToString())).
			SetText(data.Player.Name() + "'s life = " + data.Health.ToString());
	}
}

public void GrabTheGold(TriggerArgs args){
	IPlayer sender = (IPlayer)args.Sender;
	IObject caller = (IObject)args.Caller;

	for(int i = 0; i < players.Count; i++){
		PlayerData data = players[i];
		IPlayer ply = pInfo.Player;
		if(ply == sender && !sender.IsDead){
			if(data.Nuggets.Count < NUGGETS_PER_PLAYER){
				data.Nuggets.Add(caller);
				caller.SetWorldPosition((Game.GetSingleObjectByCustomId("BluH_" + (GetPlayerDataIndex(data.Player)).ToString())).GetWorldPosition(), true);
			}
			break;
		}
	}
}

public void Death(TriggerArgs args){
	dead = (IPlayer)args.Sender;
	CreateTimer(1, 1, "AfterDeath", "afterThis");
}

IPlayer dead;
public void AfterDeath(TriggerArgs args){
	IPlayer sender = dead;
	IPlayer player = null;
	PlayerData PData = null;
	int i = GetPlayerDataIndex(sender);
		if(sender != null && !sender.IsRemoved){
			if(players[i].Player == sender){
				PData = players[i];
				player = PData.Player;
				IPlayerStatistics pStatistics = player.Statistics;
				players[i].Health += PData.LastDamage - pStatistics.TotalDamageTaken;
				if(PData.Health >= 0 && PData.Player.GetWorldPosition().Y > Game.GetWorldBottom()){
					players[i].Player = SpawnUser(PData);
					PData.Player.SetHealth((PData.Health*100)/PData.MaxHealth);
					foreach(WeaponItem wpn in players[i].Weapons){
						players[i].Player.GiveWeaponItem(wpn);
					}
					player.Remove();
				}else{ int o = 0;
					foreach(IObject lamp in players[i].nuggets){
						if(lamp != null){
							lamp.SetWorldPosition(players[i].Player.GetWorldPosition() + new Vector2(Rnd.Next(5), Rnd.Next(5)), true);
							lamp.SetLinearVelocity(new Vector2(Rnd.Next(5), Rnd.Next(5)), true);
							players[i].nuggets[o] = null;
							players[i].goldStored --;
						} o ++;
					}
					if(players[i].lifes > 0){
						players[i].DeathTime = Game.TotalElapsedGameTime;
						CreateTimer((int)deathDelay, 1, "Respawner", "respawner");
						Game.WriteToConsole("Times");
					}
				}
			}
	}
	((IObjectTimerTrigger)args.Caller).Remove();
	dead = null;
}

IPlayer playerToRespawn;
public void Respawner(TriggerArgs args){
	float Time = 0f;
	for(int i = players.Count - 1; i >= 0; i --){
		if(players[i].DeathTime < Time || Time == 0){
			if(players[i].DeathTime != 0){
				playerToRespawn = players[i].Player;
				Time = players[i].DeathTime;
			}
		}
	}
	int nmb = GetPlayerDataIndex(playerToRespawn);
	if(playerToRespawn != null && players[nmb].Player == playerToRespawn){
		players[nmb].Health = players[nmb].MaxHealth;
		IPlayer lastPly = players[nmb].Player;
		players[nmb].Player = SpawnUser(players[nmb]);
		if(players[nmb].Player.GetTeam() == PlayerTeam.Team1){
			players[nmb].Player.SetWorldPosition(GetObjectPos("Blu_Spawn"));
		}else
			players[nmb].Player.SetWorldPosition(GetObjectPos("Red_Spawn"));
		lastPly.Remove();
		players[nmb].DeathTime = 0f;
		players[nmb].lifes --;
		playerToRespawn = null;
	}
	Game.WriteToConsole(Time.ToString());
	((IObjectTimerTrigger)args.Caller).Remove();
}

public void away(TriggerArgs args){
	IPlayer sender = (IPlayer)args.Sender;
	int n = GetPlayerDataIndex(sender);
	if(sender.GetTeam() == PlayerTeam.Team1){
		sender.SetWorldPosition(GetObjectPos("Blu_Defense"));
	}else
		sender.SetWorldPosition(GetObjectPos("Red_Defense"));
	players[n].EnteredBattle = true;
}

//-Handy-//

private IPlayer SpawnUser(PlayerData PData){
	if (CheckUserStillActive(PData.Player.GetUser())){
		IPlayer newPlayer = Game.CreatePlayer(PData.Player.GetWorldPosition()); // create a new blank player
		newPlayer.SetUser(PData.Player.GetUser()); // set user (this will make the user control the player instance)
		newPlayer.SetProfile(PData.Player.GetProfile()); // set user's profile
		newPlayer.SetWorldPosition(PData.Player.GetWorldPosition());
		newPlayer.SetTeam(PData.Team);
		return newPlayer;
	} else players.Remove(PData);
	return null;
}

private bool CheckUserStillActive(IUser user){
	foreach(IUser activeUser in Game.GetActiveUsers()){
		if (activeUser.UserId == user.UserId) {
			return true;
		}
	}
	return false;
}

public void SetTheText(string obj, string message){
	((IObjectText)Game.GetSingleObjectByCustomId(obj)).SetText(message);
}

public Vector2 GetObjectPos(string obj){
	return ((IObject)Game.GetSingleObjectByCustomId(obj)).GetWorldPosition();
}

//-Money-//

public void buy(TriggerArgs args){
	IPlayer ply = (IPlayer)args.Sender; // sender
	int nmb = GetPlayerDataIndex(ply);
	switch (((IObject)args.Caller).CustomId)
	{
		//case "katana" : CheckMoney(ply,6,WeaponItem.KATANA); break;
		case "katana" :	 if(players[nmb].Weapons[0] != WeaponItem.KATANA)	if(CheckMoney(ply,6)){
						players[nmb].Weapons[0] = WeaponItem.KATANA;	ply.GiveWeaponItem(WeaponItem.KATANA);} break;

		case "sniper" :	 if(players[nmb].Weapons[2] != WeaponItem.SNIPER)	if(CheckMoney(ply,7) ){
						players[nmb].Weapons[2] = WeaponItem.SNIPER;	ply.GiveWeaponItem(WeaponItem.SNIPER);} break;

		case "pistol" :	 if(players[nmb].Weapons[1] != WeaponItem.PISTOL)	if(CheckMoney(ply,2)){
						players[nmb].Weapons[1] = WeaponItem.PISTOL;	ply.GiveWeaponItem(WeaponItem.PISTOL);} break;

		case "SMG" :	 	 if(players[nmb].Weapons[2] != WeaponItem.TOMMYGUN)if(CheckMoney(ply,6)){
						players[nmb].Weapons[2] = WeaponItem.TOMMYGUN;	ply.GiveWeaponItem(WeaponItem.TOMMYGUN);} break;

		case "machete" :	 if(players[nmb].Weapons[0] != WeaponItem.MACHETE)	if(CheckMoney(ply,4)){
						players[nmb].Weapons[0] = WeaponItem.MACHETE;	ply.GiveWeaponItem(WeaponItem.MACHETE);} break;

		case "slow1" :	 if(players[nmb].Weapons[3] != WeaponItem.SLOWMO_5)if(CheckMoney(ply,1)){
						players[nmb].Weapons[3] = WeaponItem.SLOWMO_5;	ply.GiveWeaponItem(WeaponItem.SLOWMO_5);} break;

		case "slow2" :	 if(players[nmb].Weapons[3] != WeaponItem.SLOWMO_10)if(CheckMoney(ply,2)){
						players[nmb].Weapons[3] = WeaponItem.SLOWMO_10;	ply.GiveWeaponItem(WeaponItem.SLOWMO_10);} break;

		case "SO" :		 if(players[nmb].Weapons[2] != WeaponItem.SAWED_OFF)if(CheckMoney(ply,4)){
						players[nmb].Weapons[2] = WeaponItem.SAWED_OFF;	ply.GiveWeaponItem(WeaponItem.SAWED_OFF);} break;

		case "wrench" :	 if(players[nmb].Weapons[0] != WeaponItem.PIPE)	if(CheckMoney(ply,1)){
						players[nmb].Weapons[0] = WeaponItem.PIPE;	ply.GiveWeaponItem(WeaponItem.PIPE);} break;

		case "magnum" :	 if(players[nmb].Weapons[1] != WeaponItem.MAGNUM)	if(CheckMoney(ply,5)){
						players[nmb].Weapons[1] = WeaponItem.MAGNUM;	ply.GiveWeaponItem(WeaponItem.MAGNUM);} break;

		case "reset" : {
			ply.RemoveWeaponItemType(WeaponItemType.Melee);
			ply.RemoveWeaponItemType(WeaponItemType.Handgun);
			ply.RemoveWeaponItemType(WeaponItemType.Rifle);
			ply.RemoveWeaponItemType(WeaponItemType.Thrown);
			ply.RemoveWeaponItemType(WeaponItemType.Powerup);
			players[nmb].Money = 10;
			for(int i = players[nmb].Weapons.Length - 1; i>=0; i--)
				players[nmb].Weapons[i] = WeaponItem.NONE;
			break;
		}
		default : break;
	}
}

public bool CheckMoney(IPlayer ply, int mon){
	int nmb = GetPlayerDataIndex(ply);
	if (players[nmb].Money >= mon){
		(players[nmb]).Money -= mon;
		return true;
		//ply.GiveWeaponItem(wpn);
	}
	else{ Game.ShowPopupMessage(ply.Name() + " is poor."); Game.PlaySound("MenuCancel", new Vector2(0, 0), 0f); return false;}
}

//-nevermind-// wtf? :D

public void Move(TriggerArgs args){

	if(args.Sender is IPlayer){
		IPlayer sender = (IPlayer)args.Sender;
		IObject caller = (IObject)args.Caller;

		if(caller.CustomId == "Move_Right"){
			sender.SetWorldPosition(new Vector2((Game.GetSingleObjectByCustomId("Move_Left")).GetWorldPosition().X + 10f, sender.GetWorldPosition().Y));
		}

		if(caller.CustomId == "Move_Left"){
			sender.SetWorldPosition(new Vector2((Game.GetSingleObjectByCustomId("Move_Right")).GetWorldPosition().X - 10f, sender.GetWorldPosition().Y));
		}

		if(caller.CustomId == "Move_Top"){
			sender.SetWorldPosition(new Vector2(sender.GetWorldPosition().X, (Game.GetSingleObjectByCustomId("Move_Bottom")).GetWorldPosition().Y + 20f));
		}

		if(caller.CustomId == "Move_Bottom"){
			sender.SetWorldPosition(new Vector2(sender.GetWorldPosition().X, (Game.GetSingleObjectByCustomId("Move_Top")).GetWorldPosition().Y - 20f));
		}
	}

	if(args.Sender is IObject){
		IObject sender = (IObject)args.Sender;
		IObject caller = (IObject)args.Caller;

		if(sender.CustomId != "doNothing"){

			if(caller.CustomId == "Move_Right"){
				sender.SetWorldPosition(new Vector2((Game.GetSingleObjectByCustomId("Move_Left")).GetWorldPosition().X + 15f, sender.GetWorldPosition().Y), true);
			}

			if(caller.CustomId == "Move_Left"){
				sender.SetWorldPosition(new Vector2((Game.GetSingleObjectByCustomId("Move_Right")).GetWorldPosition().X - 15f, sender.GetWorldPosition().Y), true);
			}

			if(caller.CustomId == "Move_Top"){
				sender.SetWorldPosition(new Vector2(sender.GetWorldPosition().X, (Game.GetSingleObjectByCustomId("Move_Bottom")).GetWorldPosition().Y + 15f), true);
			}

			if(caller.CustomId == "Move_Bottom"){
				sender.SetWorldPosition(new Vector2(sender.GetWorldPosition().X, (Game.GetSingleObjectByCustomId("Move_Top")).GetWorldPosition().Y - 15f), true);
			}
		}
	}
}

// Helpers

// create timer trigger
public void CreateTimer(int interval, int count, string method, string id) {
	IObjectTimerTrigger timerTrigger = (IObjectTimerTrigger)Game.CreateObject("TimerTrigger"); 
	timerTrigger.SetIntervalTime(interval);
	timerTrigger.SetRepeatCount(count);
	timerTrigger.SetScriptMethod(method);
	timerTrigger.CustomId = id;
	timerTrigger.Trigger();
}

public int GetPlayerDataIndex(IPlayer ply){
	for(int i = players.Count -1; i>=0; i--)
		if(ply == players[i].Player) return i;
	return 0;
}

public PlayerData GetPlayerData(IPlayer ply){

}